/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ph.com.globe.csvparser.xmlconverter;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import ph.com.globe.csvparser.constant.XMLMassRequestHeader;

/**
 *
 * 
 */
public class XMLConverter {

    private String header_handleMassOperation_top= "HandleMassOperation|~|<?xml version=\"1.0\" encoding=\"UTF-8\"?>";    
    private String header_interface="<Interface xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OmsInterface.xsd\">";
    private String header_handleMassOperation = "<HandleMassOperation>";
    private String header_handleMassOperationRequest = "<HandleMassOperationRequest>";
    private String header_massRequestHeader = "<MassRequestHeader";
    private String header_massRequestDetails = "<MassRequestDetails";
    private String header_optionalConfigurationItem = "<OptionalConfigurationItem";
    private String header_subProductIDElement = "<SubProductIDElement";
    private String header_dynamicProperty = "<DynamicProperty";
    private String header_massLineInfo = "<MassLineInfo";
    private String header_idElement = "<IDElement";
    
    private String footer_massLineInfo = "</MassLineInfo>";
    private String footer_massRequestDetails = "</MassRequestDetails>";
    private String footer_optionalConfigurationItem = "</OptionalConfigurationItem>";
    private String footer_massRequestHeader = "</MassRequestHeader>";
    private String footer_handleMassOperationRequest = "</HandleMassOperationRequest>";
    private String footer_handleMassOperation = "</HandleMassOperation>";
    private String footer_interface="</Interface>|~|<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
    private String footer_context = "<Context xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OmsContext.xsd\" requestTime=\"2016-02-22T01:01:01\" userID=\"vineetpa\"/>";
    /**
     * Creates new form UploadPanel
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    

    public Map<String, String> getXmlMassRequestHeaders(String[] tags, String[] values) {
    	
    	XMLMassRequestHeader headers = new XMLMassRequestHeader();
    	ArrayList<String> xmlMassRequestHeaders = headers.getXmlMassHeaderList();
    	Map<String, String> headersMap = new HashMap<String, String>();
    	
    	Integer valueIndex = 0;
    	System.out.println("List of mass request headers: ");
    	
    	for(String tag: tags) {
    		for(String xmlMassRequestHeader: xmlMassRequestHeaders) {
    			if(tag.equals(xmlMassRequestHeader)) {
    				System.out.println("header name: " + xmlMassRequestHeader + ", value: " + values[valueIndex]);
    				headersMap.put(xmlMassRequestHeader, values[valueIndex]);
    				break;
    			}
    		}
    		valueIndex++;
    	}
		return headersMap;
    	
    }
    
    public void convertToXML_changeConfiguration(String csvSource, String destination, String fileName) {//GEN-FIRST:event_convertActionPerformed
    	XMLConverter converter = new XMLConverter();
    	File xmlFile = null;
    	boolean isHeaderWritten = false;
    	
    	System.out.println("src: " + csvSource);
    	System.out.println("file name: " + fileName);
        try {
            if(fileName!=null){
                File excelFile = new File(csvSource);
                BufferedReader br = new BufferedReader(new FileReader(excelFile));
                String str;
                List<String> listStr = new ArrayList<String>();
                List<String> listValue = new ArrayList<String>();
                
                //List of MSISDNs
                List<String> listMsisdn = new ArrayList<String>();
                while((str = br.readLine())!=null){
                    listStr.add(str);
                }
                
                //Tags are now stored in this array of Strings
                String[] tags = listStr.get(0).split("\\,");
                
                //Get second line of the code and split to get the required values
                String[] values = listStr.get(1).split("\\,");
                
                Map<String, String> xmlMassRequestHeadersMap = converter.getXmlMassRequestHeaders(tags, values);
                
                System.out.println("Map size: " + xmlMassRequestHeadersMap.size());
//                Iterator<Map.Entry<String,String>> iterator = xmlMassRequestHeadersMap.entrySet().iterator();
////                while(iterator.hasNext()) {
////                    Map.Entry<String,String> entry = iterator.next();
////                    System.out.println("\t\t\t\t\t" + entry.getKey() + "=\"" + entry.getValue() +"\"");
////                    
////              
////                }
//                
                
                //Add to the list of values
                for(int i=1;i<listStr.size();i++){
                    listValue.add(listStr.get(i));               	
                }
 
                //List of MSISDNs
                for (String value: listValue) {
                	String msisdnValue = value.split("\\,")[(value.split("\\,").length)-1];
                	//Add MSISDN to the arraylist
                	if(msisdnValue != null)
                		listMsisdn.add(msisdnValue);
                }
                //String[] fileSplit = fileName.split("\\.");
                String xmlFileName = fileName+".xml";
                //delete this afterwards
                System.out.println("xml file name: " + xmlFileName);
                
                xmlFile = new File(destination);
                xmlFile.createNewFile();
                PrintWriter writer = new PrintWriter(xmlFile);
                writer.append(header_handleMassOperation_top);
                writer.append("\n");
                for(String content:listValue){
                	//To avoid repetition of creating headers
                	if(!isHeaderWritten) {
                		String[]vals = content.split(",");
                        //int i=0;
                        //String space="   ";                   
                        writer.append("\t" + header_interface);
                        writer.append("\n");
                        writer.append("\t\t" + header_handleMassOperation);
                        writer.append("\n");
                        writer.append("\t\t\t" + header_handleMassOperationRequest);
                        writer.append("\n");
                        writer.append("\t\t\t\t" + header_massRequestHeader);
                        //writer.append("\n\t\t\t\t");
                        
                        //Add MassRequestHeader parameters
                        Iterator<Map.Entry<String,String>> iterator = xmlMassRequestHeadersMap.entrySet().iterator();
                        while(iterator.hasNext()) {
                            Map.Entry<String,String> entry = iterator.next();
                            writer.append(" " + entry.getKey() + "=\"" + entry.getValue() +"\"");
                        }
                        writer.append("/>");
//                        for(String tag:tags){
//                        	if(i==3) {
//                        		//get number of request line
//                        		writer.println("\t\t\t\t\t" + tag + "=\"" + vals[i] +"\"");
//                        		writer.println("\t\t\t\t\tnumberOfRequestLines=\"" + listMsisdn.size() +"\"");
//                        	}
//                        	else {
//                        		writer.println("\t\t\t\t\t" + tag + "=\"" + vals[i] +"\"");
//                        	}
//                        	i++;
//                        	
//                            if(i==6) {
//                            	writer.append("\t\t\t\t>" + footer_massRequestHeader);
//                            	break;
//                            }
//                        }
                        writer.append("\n\t\t\t\t" + header_massRequestDetails + " " + tags[6]  + "=\"" + vals[6] +"\">");
                        writer.append("\n\t\t\t\t\t" + header_optionalConfigurationItem + " " + tags[7]  + "=\"" + vals[7] +"\">");
                        writer.append("\n");
                        writer.append("\t\t\t\t\t\t" + header_subProductIDElement + "\" value=\"" + vals[8] +"\"" + " type=\"" + tags[8]   + "\"/>");
                        writer.append("\n");
                        writer.append("\t\t\t\t\t" +  footer_optionalConfigurationItem);
                        writer.append("\n");
                        writer.append("\t\t\t\t\t" + header_dynamicProperty + "\" name=\"" + tags[9] +"\"" + " value=\"" + vals[9]   + "\"/>");
                        writer.append("\n");
                        writer.append("\t\t\t\t" +  footer_massRequestDetails);
                        for (int j =0; j < listMsisdn.size(); j++) {
                        	writer.append("\n");
                        	writer.append("\t\t\t\t" +  header_massLineInfo + " requestLineNumber=\"" + (j+1) + "\">");
                        	writer.append("\n");
                        	writer.append("\t\t\t\t\t" +  header_idElement + " value=\"" + listMsisdn.get(j) + "\" type=\"" + tags[10] + "\">");
                        	writer.append("\n");
                        	writer.append("\t\t\t\t" +  footer_massLineInfo);
                        }
                        writer.append("\n");
                        writer.append("\t\t\t" +  footer_handleMassOperationRequest);
                        writer.append("\n");
                        writer.append("\t\t" + footer_handleMassOperation);
                        writer.append("\n");
                        writer.append("\t" + footer_interface);
                        writer.append("\n"); 
                	}
                	isHeaderWritten = true;
                    
                }
                writer.append(footer_context);
                //close reader
                br.close();
                //close writer
                writer.close();
                System.out.println("Success");
                
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
		//return xmlFile;
		   
    }//GEN-LAST:event_convertActionPerformed
    
    
    public void convertToXML_replaceOfferWithBasePlan(String csvSource, String destination, String fileName) {//GEN-FIRST:event_convertActionPerformed
    	File xmlFile = null;
    	boolean isHeaderWritten = false;
    	
    	System.out.println("src: " + csvSource);
    	System.out.println("file name: " + fileName);
        try {
            if(fileName!=null){
                File excelFile = new File(csvSource);
                BufferedReader br = new BufferedReader(new FileReader(excelFile));
                String str;
                List<String> listStr = new ArrayList<String>();
                List<String> listValue = new ArrayList<String>();
                
                //List of MSISDNs
                List<String> listMsisdn = new ArrayList<String>();
                while((str = br.readLine())!=null){
                    listStr.add(str);
                }
                String[] tags = listStr.get(0).split("\\,");
                
                //Add to the list of values
                for(int i=1;i<listStr.size();i++){
                    listValue.add(listStr.get(i));               	
                }
 
                //List of MSISDNs
                for (String value: listValue) {
                	String msisdnValue = value.split("\\,")[(value.split("\\,").length)-1];
                	//Add MSISDN to the arraylist
                	if(msisdnValue != null)
                		listMsisdn.add(msisdnValue);
                }
                //String[] fileSplit = fileName.split("\\.");
                String xmlFileName = fileName+".xml";
                //delete this afterwards
                System.out.println("xml file name: " + xmlFileName);
                
                xmlFile = new File(destination);
                xmlFile.createNewFile();
                PrintWriter writer = new PrintWriter(xmlFile);
                writer.append(header_handleMassOperation_top);
                writer.append("\n");
                for(String content:listValue){
                	//To avoid repetition of creating headers
                	if(!isHeaderWritten) {
                		String[]vals = content.split(",");
                        int i=0;
                        //String space="   ";                   
                        writer.append("\t" + header_interface);
                        writer.append("\n");
                        writer.append("\t\t" + header_handleMassOperation);
                        writer.append("\n");
                        writer.append("\t\t\t" + header_handleMassOperationRequest);
                        writer.append("\n");
                        writer.append("\t\t\t\t" + header_massRequestHeader);
                        writer.append("\n");
                        for(String tag:tags){
                        	if(i==3) {
                        		//get number of request line
                        		writer.println("\t\t\t\t\t" + tag + "=\"" + vals[i] +"\"");
                        		writer.println("\t\t\t\t\tnumberOfRequestLines=\"" + listMsisdn.size() +"\"");
                        	}
                        	else {
                        		writer.println("\t\t\t\t\t" + tag + "=\"" + vals[i] +"\"");
                        	}
                        	i++;
                        	
                            if(i==6) {
                            	writer.append("\t\t\t\t>" + footer_massRequestHeader);
                            	break;
                            }
                        }
                        writer.append("\n\t\t\t\t" + header_massRequestDetails + " " + tags[6]  + "=\"" + vals[6] +"\">");
                        writer.append("\n\t\t\t\t\t" + header_optionalConfigurationItem + " " + tags[7]  + "=\"" + vals[7] +"\">");
                        writer.append("\n");
                        writer.append("\t\t\t\t\t\t" + header_subProductIDElement + "\" value=\"" + vals[8] +"\"" + " type=\"" + tags[8]   + "\"/>");
                        writer.append("\n");
                        writer.append("\t\t\t\t\t" +  footer_optionalConfigurationItem);
                        writer.append("\n");
                        writer.append("\t\t\t\t\t" + header_dynamicProperty + "\" name=\"" + tags[9] +"\"" + " value=\"" + vals[9]   + "\"/>");
                        writer.append("\n");
                        writer.append("\t\t\t\t" +  footer_massRequestDetails);
                        for (int j =0; j < listMsisdn.size(); j++) {
                        	writer.append("\n");
                        	writer.append("\t\t\t\t" +  header_massLineInfo + " requestLineNumber=\"" + (j+1) + "\">");
                        	writer.append("\n");
                        	writer.append("\t\t\t\t\t" +  header_idElement + " value=\"" + listMsisdn.get(j) + "\" type=\"" + tags[10] + "\">");
                        	writer.append("\n");
                        	writer.append("\t\t\t\t" +  footer_massLineInfo);
                        }
                        writer.append("\n");
                        writer.append("\t\t\t" +  footer_handleMassOperationRequest);
                        writer.append("\n");
                        writer.append("\t\t" + footer_handleMassOperation);
                        writer.append("\n");
                        writer.append("\t" + footer_interface);
                        writer.append("\n"); 
                	}
                	isHeaderWritten = true;
                    
                }
                writer.append(footer_context);
                //close reader
                br.close();
                //close writer
                writer.close();
                System.out.println("Success");
                
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
		//return xmlFile;
		   
    }//GEN-LAST:event
}
